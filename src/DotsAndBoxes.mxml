<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="onCreationCompleate(event)">
	<fx:Script>
		<![CDATA[
			import com.ourguy.algo.AlphaBetaAlgorithm;
			import com.ourguy.events.FilledBoxEvent;
			import com.ourguy.events.TurnEvent;
			import com.ourguy.model.FieldModel;
			import com.ourguy.model.LineModel;
			import com.ourguy.util.Constants;
			import com.ourguy.view.Field;
			import com.ourguy.view.Line;
			
			import mx.events.FlexEvent;
			private var checkedBox:Boolean = false;
			private	var field:Field;
			private	var fieldModel:FieldModel = new FieldModel();
			
			protected function onCreationCompleate(event:FlexEvent):void
			{
				field  = new Field();
				field.x = 50;
				field.y = 50;
				
				holder.addChild(field);
				holder.addEventListener(TurnEvent.TURN_FINISHED,finishMove);
			}
			
			protected function finishMove(event:TurnEvent):void
			{
				lineAdded(event.line);
				if(checkedBox)
				{
					checkedBox = false
				}else
				{
					Constants.turn = !Constants.turn;
				}
			}
			
			public function lineAdded(line:Line):void
			{
				if(line.model.j+1<Constants.fieldCols&&line.model.i+1<Constants.fieldRows)
				{
					if(line.model.isVertical)
					{
						fieldModel.field[line.model.i][line.model.j] += Constants.BOX_LEFT*(line.turn?2:1);
						
					}else
					{
						fieldModel.field[line.model.i][line.model.j] += Constants.BOX_UP*(line.turn?2:1);
					}
					if(isBoxFull(fieldModel.field[line.model.i][line.model.j]))
					{
						fieldModel.field[line.model.i][line.model.j] = -1*(line.turn?2:1);
						boxWasChecked(line.model.i,line.model.j,Math.abs(fieldModel.field[line.model.i][line.model.j]));
					}
				}
				setSecondFlag(line);
			}
			public function setSecondFlag(line:Line):void
			{
				if(line.model.isVertical)
				{
					if(line.model.j>0)
					{
						fieldModel.field[line.model.i][line.model.j-1] += Constants.BOX_RIGHT*(line.turn?2:1);			
						if(isBoxFull(fieldModel.field[line.model.i][line.model.j-1]))
						{
							fieldModel.field[line.model.i][line.model.j-1] = -1*(line.turn?2:1);
							boxWasChecked(line.model.i,line.model.j-1,Math.abs(fieldModel.field[line.model.i][line.model.j-1]));
						}
					}
				}else
				{
					if(line.model.i>0)
					{
						fieldModel.field[line.model.i-1][line.model.j] += Constants.BOX_DOWN*(line.turn?2:1);
						if(isBoxFull(fieldModel.field[line.model.i-1][line.model.j]))
						{
							fieldModel.field[line.model.i-1][line.model.j] = -1*(line.turn?2:1);
							boxWasChecked(line.model.i-1,line.model.j,Math.abs(fieldModel.field[line.model.i-1][line.model.j]));
						}
					}
				}
				checkForEmptyLines();
			}
			
			public function isBoxFull(box:int):Boolean
			{
				if(box>Constants.BOX_LEFT&&(box=box%Constants.BOX_LEFT)>Constants.BOX_UP&&(box=box%Constants.BOX_UP)>Constants.BOX_RIGHT&&(box=box%Constants.BOX_RIGHT)>=1)
				{
					checkedBox = true;
					return true;
				}
				return false;
			}
			
			public function boxWasChecked(i:int,j:int,player:int):void
			{
				//this.dispatchEvent(new FilledBoxEvent(FilledBoxEvent.BOX_FILLED,i,j,player));
				field.fillBoxUI(i,j,player);
			}
			
			public function checkForEmptyLines():void
			{
				var emptyLines:Array = new Array();
				for(var i:int = 0;i<Constants.fieldRows-1;i++)
				{
					for(var j:int = 0;j<Constants.fieldCols-1;j++)
					{
						if(fieldModel.field[i][j] >= 0)
						{
							emptyLines.push.apply( null, checkBoxForEmptyLines(i, j));		
						}
					}
				}
				trace("EMPTY LINES: ",emptyLines.length);
			}
			
			public function checkBoxForEmptyLines(i:int, j:int):Array
			{
				var result:Array = new Array();
				var tempLine:LineModel;
				var box:int = fieldModel.field[i][j];
				if(box<Constants.BOX_LEFT)
				{
					tempLine = new LineModel(i, j, true);
					result.push(tempLine);
				}
				if((box %= Constants.BOX_LEFT)<Constants.BOX_UP)
				{
					tempLine = new LineModel(i, j, false);
					result.push(tempLine);
				}
				
				if(j == Constants.fieldCols-2 && ((box %= Constants.BOX_UP)<Constants.BOX_RIGHT))
				{
					tempLine = new LineModel(i+1,j,true);
					result.push(tempLine);
					
				}
				if(i == Constants.fieldRows-2 && ((box %= Constants.BOX_RIGHT)<Constants.BOX_DOWN))
				{
					tempLine = new LineModel(i,j+1,false);
					result.push(tempLine);
				}
				
				trace ("box",fieldModel.field[i][j],i,j,result.length, AlphaBetaAlgorithm.evaluate(fieldModel));
				return result;
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:UIComponent id="holder"/>
</s:WindowedApplication>
