<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="onCreationCompleate(event)">
	<fx:Script>
		<![CDATA[
			import com.ourguy.algo.AlgoUtils;
			import com.ourguy.algo.AlphaBetaAlgorithm;
			import com.ourguy.events.FilledBoxEvent;
			import com.ourguy.events.TurnEvent;
			import com.ourguy.model.FieldModel;
			import com.ourguy.model.LineModel;
			import com.ourguy.util.Constants;
			import com.ourguy.view.Field;
			import com.ourguy.view.Line;
			
			import mx.events.FlexEvent;
			private var checkedBox:Boolean = false;
			private	var field:Field;
			private	var fieldModel:FieldModel = new FieldModel();
			private	var algo:AlphaBetaAlgorithm = new AlphaBetaAlgorithm();
			private static var iter:int = 0;
			protected function onCreationCompleate(event:FlexEvent):void
			{
				field  = new Field();
				field.x = 50;
				field.y = 50;
				
				holder.addChild(field);
				holder.addEventListener(TurnEvent.TURN_FINISHED,finishMove);
			}
			
			protected function finishMove(event:TurnEvent):void
			{
				lineAdded(event.line);
				//trace("added : ",event.line.model.i,event.line.model.j,event.line.model.isVertical);
				if(checkedBox)
				{
					checkedBox = false
				}else
				{
					Constants.turn = !Constants.turn;
				}
				iter++;
				if(Constants.turn)
				{
					var emptyLines:Array = AlgoUtils.checkForEmptyLines(fieldModel);
					algo.algorithm2(fieldModel,2,-161000,10000,Constants.turn,emptyLines);
					var line:LineModel = algo.rightMove;
					trace(line.i,line.j,line.isVertical);
					//trace(algo.rightMove.i,algo.rightMove.j,algo.rightMove.isVertical);
					//line.onClick(null);
						//var line2:Line = field.getChildByName(String(line.i+"_"+line.j+"_"+line.isVertical)) as Line;
						for( var i:int=0 ;i< field.numChildren;i++)
						{
							var child:Line;
							if(field.getChildAt(i) is Line)
							{
								child = field.getChildAt(i) as Line;
								if(child.model.j == line.j&&child.model.i == line.i&&child.model.isVertical == line.isVertical)
								{
									child.onClick(null);
								}
							}
						}
//					for each(var line:LineModel in emptyLines)
//					{
//						//var line2:Line = field.getChildByName(String(line.i+"_"+line.j+"_"+line.isVertical)) as Line;
//						for( var i:int=0 ;i< field.numChildren;i++)
//						{
//							var child:Line;
//							if(field.getChildAt(i) is Line)
//							{
//								child = field.getChildAt(i) as Line;
//								if(child.model.j == line.j&&child.model.i == line.i&&child.model.isVertical == line.isVertical)
//								{
//									child.drawBlack(null);
//								}
//							}
//						}
//						trace(line.i,line.j,line.isVertical);
//					}
//					trace(emptyLines.length);
				}
			}
			
			public function lineAdded(line:Line):void
			{
				if(line.model.j+1<Constants.fieldCols&&line.model.i+1<Constants.fieldRows)
				{
					if(line.model.isVertical)
					{
						fieldModel.field[line.model.i][line.model.j] += Constants.BOX_LEFT*(line.model.turn?2:1);
						
					}else
					{
						fieldModel.field[line.model.i][line.model.j] += Constants.BOX_UP*(line.model.turn?2:1);
					}
					if(isBoxFull(fieldModel.field[line.model.i][line.model.j]))
					{
						fieldModel.field[line.model.i][line.model.j] = -1*(line.model.turn?2:1);
						boxWasChecked(line.model.i,line.model.j,Math.abs(fieldModel.field[line.model.i][line.model.j]));
					}
				}
				setSecondFlag(line);
			}
			public function setSecondFlag(line:Line):void
			{
				if(line.model.isVertical)
				{
					if(line.model.j>0)
					{
						fieldModel.field[line.model.i][line.model.j-1] += Constants.BOX_RIGHT*(line.model.turn?2:1);			
						if(isBoxFull(fieldModel.field[line.model.i][line.model.j-1]))
						{
							fieldModel.field[line.model.i][line.model.j-1] = -1*(line.model.turn?2:1);
							boxWasChecked(line.model.i,line.model.j-1,Math.abs(fieldModel.field[line.model.i][line.model.j-1]));
						}
					}
				}else
				{
					if(line.model.i>0)
					{
						fieldModel.field[line.model.i-1][line.model.j] += Constants.BOX_DOWN*(line.model.turn?2:1);
						if(isBoxFull(fieldModel.field[line.model.i-1][line.model.j]))
						{
							fieldModel.field[line.model.i-1][line.model.j] = -1*(line.model.turn?2:1);
							boxWasChecked(line.model.i-1,line.model.j,Math.abs(fieldModel.field[line.model.i-1][line.model.j]));
						}
					}
				}
			}
			
			public function isBoxFull(box:int):Boolean
			{
				if(box>Constants.BOX_LEFT&&(box=box%Constants.BOX_LEFT)>Constants.BOX_UP&&(box=box%Constants.BOX_UP)>Constants.BOX_RIGHT&&(box=box%Constants.BOX_RIGHT)>=1)
				{
					checkedBox = true;
					return true;
				}
				return false;
			}
			
			public function boxWasChecked(i:int,j:int,player:int):void
			{
				//this.dispatchEvent(new FilledBoxEvent(FilledBoxEvent.BOX_FILLED,i,j,player));
				field.fillBoxUI(i,j,player);
			}
			

			
			
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<mx:UIComponent id="holder"/>
</s:WindowedApplication>
